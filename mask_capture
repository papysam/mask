#!/usr/bin/python3

import cv2
from typing import TypeVar, Dict
import numpy
import requests
import sys
from PyInquirer import prompt
import subprocess
from collections import OrderedDict
import os
import docker


T_VideoCapture = TypeVar('cv2.VideoCapture')
T_ndarray = TypeVar('numpy.ndarray')


CAMERA = {
    'name'   : 'Logitech C920',
    'device' : '/dev/video0',
    'height' : 720,
    'width'  : 960,
    'fps'    : 30
}

PATH = os.path.dirname(os.path.abspath(__file__))


def configure_camera() -> T_VideoCapture:
    cap = cv2.VideoCapture(CAMERA['device'])
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, CAMERA['width'])
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, CAMERA['height'])
    cap.set(cv2.CAP_PROP_FPS, CAMERA['fps'])
    return cap


def get_mask(frame : T_ndarray, bodypix_service : str = 'http://localhost:9000') -> T_ndarray:
    _, data = cv2.imencode('.jpg', frame)
    req = requests.post(
        url = bodypix_service,
        data = data.tobytes(),
        headers = {'Content-Type' : 'application/octet-stream'}
    )

    mask = numpy.frombuffer(req.content, dtype=numpy.uint8)
    mask = mask.reshape((frame.shape[0], frame.shape[1]))

    return mask


def capture(cap : T_VideoCapture, bg_file : str, filename : str) -> None:
    success, frame = cap.read()
    mask = get_mask(frame)

    background = cv2.imread(os.path.join(PATH, 'backgrounds', bg_file))

    inv_mask = 1 - mask
    for c in range(frame.shape[2]):
        frame[:, :, c] = frame[:, :, c] * mask + background[:,:,c] * inv_mask

    cv2.imwrite(filename, frame)


def get_list_backgrounds() -> Dict[str, str]:
    files = subprocess.getoutput('ls -1 ' + os.path.join(PATH, 'backgrounds')).split('\n')
    result = OrderedDict()

    for filename in files:
        description = subprocess.getoutput("jhead {} | grep '^Comment' | sed -e 's/^Comment      : //'".format(os.path.join(PATH, 'backgrounds', filename)))
        result[description] = filename

    return result


def get_background():
    if len(sys.argv) != 1:
        print('Syntax: mask')
        print('    Use a virtual background with the {}Â webcam'.format(CAMERA['name']))
        exit(1)
    
    list_bg = get_list_backgrounds()

    widget = [
        {
            'type': 'list',
            'name': 'bg',
            'message': 'Choose the virtual background to use :',
            'choices': list_bg.keys()
        }
    ]
    result = prompt(widget)

    return list_bg[result['bg']]


def start_bodypix() -> str:
    client = docker.from_env()
    container = client.containers.run('bg_changer', ports={'9000':9000}, detach=True)
    return client.containers.get(container.short_id)


if __name__ == '__main__':
    bodypix_microservice = start_bodypix()
    background = get_background()
    cap = configure_camera()
    capture(cap, background, 'image.jpg')
    print('Stoping bodypix microservice...')
    bodypix_microservice.stop()
